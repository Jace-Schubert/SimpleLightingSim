#shader vertex
#version 330 core

layout (location = 0) in vec3 aFragPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

uniform mat4 u_Matrix;

out vec3 Normal;
out vec3 fragPos;
out vec2 texCoords;

void main()
{
	gl_Position = u_Matrix * vec4(aFragPos, 1.0f);
	Normal = aNormal;
	fragPos = aFragPos;
	texCoords = aTexCoords;
}

#shader fragment
#version 330 core 

in vec3 Normal;
in vec3 fragPos;
in vec2 texCoords;

out vec4 FragColor;

struct Material 
{
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

struct Light
{
	vec3 pos;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 u_ObjectColor;
uniform vec3 u_LightColor;
uniform vec3 u_ViewPos;
uniform Light u_Light;
uniform Material u_Material;

void main()
{
	vec3 ambient = u_Light.ambient * vec3(texture(u_Material.diffuse, texCoords));

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(u_Light.pos - fragPos);
	float diff = max(dot(norm, lightDir), 0.0f);
	vec3 diffuse = u_Light.diffuse * diff * vec3(texture(u_Material.diffuse, texCoords));

	vec3 viewDir = normalize(u_ViewPos - fragPos);
	vec3 reflect = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflect), 0.0f), u_Material.shininess);
	vec3 specular = u_Light.specular * spec * vec3(texture(u_Material.specular, texCoords));

	FragColor = vec4(ambient + diffuse + specular, 1.0f);
}